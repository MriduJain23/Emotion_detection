import tensorflow as tf
from tensorflow import keras
from keras.models import load_model
from time import sleep
from keras.preprocessing.image import img_to_array
from keras.preprocessing import image
import cv2
import numpy as np

face_classifier = cv2.CascadeClassifier(r"C:\Users\91995\OneDrive - Venkateshwar Global School\Desktop\haarcascade_frontalface_default.xml")
classifier =load_model(r"C:\Users\91995\OneDrive - Venkateshwar Global School\Desktop\model (2).h5")

emotion_labels = ['Angry','Disgust','Fear','Happy','Neutral', 'Sad', 'Surprise']
# Feedback messages for each emotion
feedback_messages = {
    'Angry': "Take a deep breath.",
    'Disgust': "Try to think of something positive.",
    'Fear': "It's okay, you're safe.",
    'Happy': "Keep smiling!",
    'Neutral': "Stay balanced.",
    'Sad': "It's okay to feel this way. Talk to someone.",
    'Surprise': "That was unexpected!"
}

cap = cv2.VideoCapture(0)



while True:
    _, frame = cap.read()
    labels = []
    gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
    faces = face_classifier.detectMultiScale(gray)

    for (x,y,w,h) in faces:
        cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255,255),2)
        roi_gray = gray[y:y+h,x:x+w]
        roi_gray = cv2.resize(roi_gray,(48,48),interpolation=cv2.INTER_AREA)



        if np.sum([roi_gray])!=0:
            roi = roi_gray.astype('float')/255.0
            roi = img_to_array(roi)
            roi = np.expand_dims(roi,axis=0)

            prediction = classifier.predict(roi)[0]
            label=emotion_labels[prediction.argmax()]
            # Get feedback message for the detected emotion
            feedback = feedback_messages.get(label, "Keep up the good work!")  # Default feedback

            # Display feedback above the emotion label
            feedback_position = (x, y - 30)  # Adjust position above the label
            cv2.putText(frame, feedback, feedback_position, cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)  # Display feedback
            # Adjust position for the label
            label_position = (x, y + 5)  # Adjust the y position slightly down
            cv2.putText(frame, label, label_position, cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)  # Display the emotion label
        else:
            cv2.putText(frame,'No Faces',(30,80),cv2.FONT_HERSHEY_SIMPLEX,1,(0,255,0),2)
    cv2.imshow('Emotion Detector',frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
